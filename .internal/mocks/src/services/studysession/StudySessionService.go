// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// StudySessionService is an autogenerated mock type for the StudySessionService type
type StudySessionService struct {
	mock.Mock
}

type StudySessionService_Expecter struct {
	mock *mock.Mock
}

func (_m *StudySessionService) EXPECT() *StudySessionService_Expecter {
	return &StudySessionService_Expecter{mock: &_m.Mock}
}

// Sample provides a mock function with no fields
func (_m *StudySessionService) Sample() {
	_m.Called()
}

// StudySessionService_Sample_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sample'
type StudySessionService_Sample_Call struct {
	*mock.Call
}

// Sample is a helper method to define mock.On call
func (_e *StudySessionService_Expecter) Sample() *StudySessionService_Sample_Call {
	return &StudySessionService_Sample_Call{Call: _e.mock.On("Sample")}
}

func (_c *StudySessionService_Sample_Call) Run(run func()) *StudySessionService_Sample_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StudySessionService_Sample_Call) Return() *StudySessionService_Sample_Call {
	_c.Call.Return()
	return _c
}

func (_c *StudySessionService_Sample_Call) RunAndReturn(run func()) *StudySessionService_Sample_Call {
	_c.Run(run)
	return _c
}

// NewStudySessionService creates a new instance of StudySessionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStudySessionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *StudySessionService {
	mock := &StudySessionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
