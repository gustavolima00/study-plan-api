// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"
)

// AuthHandler is an autogenerated mock type for the AuthHandler type
type AuthHandler struct {
	mock.Mock
}

type AuthHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthHandler) EXPECT() *AuthHandler_Expecter {
	return &AuthHandler_Expecter{mock: &_m.Mock}
}

// CreateSession provides a mock function with given fields: e
func (_m *AuthHandler) CreateSession(e echo.Context) error {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for CreateSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthHandler_CreateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSession'
type AuthHandler_CreateSession_Call struct {
	*mock.Call
}

// CreateSession is a helper method to define mock.On call
//   - e echo.Context
func (_e *AuthHandler_Expecter) CreateSession(e interface{}) *AuthHandler_CreateSession_Call {
	return &AuthHandler_CreateSession_Call{Call: _e.mock.On("CreateSession", e)}
}

func (_c *AuthHandler_CreateSession_Call) Run(run func(e echo.Context)) *AuthHandler_CreateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *AuthHandler_CreateSession_Call) Return(_a0 error) *AuthHandler_CreateSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthHandler_CreateSession_Call) RunAndReturn(run func(echo.Context) error) *AuthHandler_CreateSession_Call {
	_c.Call.Return(run)
	return _c
}

// FinishSession provides a mock function with given fields: e
func (_m *AuthHandler) FinishSession(e echo.Context) error {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for FinishSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthHandler_FinishSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FinishSession'
type AuthHandler_FinishSession_Call struct {
	*mock.Call
}

// FinishSession is a helper method to define mock.On call
//   - e echo.Context
func (_e *AuthHandler_Expecter) FinishSession(e interface{}) *AuthHandler_FinishSession_Call {
	return &AuthHandler_FinishSession_Call{Call: _e.mock.On("FinishSession", e)}
}

func (_c *AuthHandler_FinishSession_Call) Run(run func(e echo.Context)) *AuthHandler_FinishSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *AuthHandler_FinishSession_Call) Return(_a0 error) *AuthHandler_FinishSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthHandler_FinishSession_Call) RunAndReturn(run func(echo.Context) error) *AuthHandler_FinishSession_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: e
func (_m *AuthHandler) GetUser(e echo.Context) error {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthHandler_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type AuthHandler_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - e echo.Context
func (_e *AuthHandler_Expecter) GetUser(e interface{}) *AuthHandler_GetUser_Call {
	return &AuthHandler_GetUser_Call{Call: _e.mock.On("GetUser", e)}
}

func (_c *AuthHandler_GetUser_Call) Run(run func(e echo.Context)) *AuthHandler_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *AuthHandler_GetUser_Call) Return(_a0 error) *AuthHandler_GetUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthHandler_GetUser_Call) RunAndReturn(run func(echo.Context) error) *AuthHandler_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSession provides a mock function with given fields: e
func (_m *AuthHandler) UpdateSession(e echo.Context) error {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthHandler_UpdateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSession'
type AuthHandler_UpdateSession_Call struct {
	*mock.Call
}

// UpdateSession is a helper method to define mock.On call
//   - e echo.Context
func (_e *AuthHandler_Expecter) UpdateSession(e interface{}) *AuthHandler_UpdateSession_Call {
	return &AuthHandler_UpdateSession_Call{Call: _e.mock.On("UpdateSession", e)}
}

func (_c *AuthHandler_UpdateSession_Call) Run(run func(e echo.Context)) *AuthHandler_UpdateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *AuthHandler_UpdateSession_Call) Return(_a0 error) *AuthHandler_UpdateSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthHandler_UpdateSession_Call) RunAndReturn(run func(echo.Context) error) *AuthHandler_UpdateSession_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthHandler creates a new instance of AuthHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthHandler {
	mock := &AuthHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
