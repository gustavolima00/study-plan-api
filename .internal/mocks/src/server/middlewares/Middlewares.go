// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"

	mock "github.com/stretchr/testify/mock"
)

// Middlewares is an autogenerated mock type for the Middlewares type
type Middlewares struct {
	mock.Mock
}

type Middlewares_Expecter struct {
	mock *mock.Mock
}

func (_m *Middlewares) EXPECT() *Middlewares_Expecter {
	return &Middlewares_Expecter{mock: &_m.Mock}
}

// AuthMiddleware provides a mock function with no fields
func (_m *Middlewares) AuthMiddleware() echo.MiddlewareFunc {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AuthMiddleware")
	}

	var r0 echo.MiddlewareFunc
	if rf, ok := ret.Get(0).(func() echo.MiddlewareFunc); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(echo.MiddlewareFunc)
		}
	}

	return r0
}

// Middlewares_AuthMiddleware_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthMiddleware'
type Middlewares_AuthMiddleware_Call struct {
	*mock.Call
}

// AuthMiddleware is a helper method to define mock.On call
func (_e *Middlewares_Expecter) AuthMiddleware() *Middlewares_AuthMiddleware_Call {
	return &Middlewares_AuthMiddleware_Call{Call: _e.mock.On("AuthMiddleware")}
}

func (_c *Middlewares_AuthMiddleware_Call) Run(run func()) *Middlewares_AuthMiddleware_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Middlewares_AuthMiddleware_Call) Return(_a0 echo.MiddlewareFunc) *Middlewares_AuthMiddleware_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Middlewares_AuthMiddleware_Call) RunAndReturn(run func() echo.MiddlewareFunc) *Middlewares_AuthMiddleware_Call {
	_c.Call.Return(run)
	return _c
}

// NewMiddlewares creates a new instance of Middlewares. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMiddlewares(t interface {
	mock.TestingT
	Cleanup(func())
}) *Middlewares {
	mock := &Middlewares{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
