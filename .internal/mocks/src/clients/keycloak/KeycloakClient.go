// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	keycloak "go-api/src/clients/keycloak"

	mock "github.com/stretchr/testify/mock"
)

// KeycloakClient is an autogenerated mock type for the KeycloakClient type
type KeycloakClient struct {
	mock.Mock
}

type KeycloakClient_Expecter struct {
	mock *mock.Mock
}

func (_m *KeycloakClient) EXPECT() *KeycloakClient_Expecter {
	return &KeycloakClient_Expecter{mock: &_m.Mock}
}

// GetOIDCToken provides a mock function with given fields: ctx, request
func (_m *KeycloakClient) GetOIDCToken(ctx context.Context, request keycloak.GetOIDCTokenRequest) (*keycloak.GetOIDCTokenResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetOIDCToken")
	}

	var r0 *keycloak.GetOIDCTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, keycloak.GetOIDCTokenRequest) (*keycloak.GetOIDCTokenResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, keycloak.GetOIDCTokenRequest) *keycloak.GetOIDCTokenResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keycloak.GetOIDCTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, keycloak.GetOIDCTokenRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeycloakClient_GetOIDCToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOIDCToken'
type KeycloakClient_GetOIDCToken_Call struct {
	*mock.Call
}

// GetOIDCToken is a helper method to define mock.On call
//   - ctx context.Context
//   - request keycloak.GetOIDCTokenRequest
func (_e *KeycloakClient_Expecter) GetOIDCToken(ctx interface{}, request interface{}) *KeycloakClient_GetOIDCToken_Call {
	return &KeycloakClient_GetOIDCToken_Call{Call: _e.mock.On("GetOIDCToken", ctx, request)}
}

func (_c *KeycloakClient_GetOIDCToken_Call) Run(run func(ctx context.Context, request keycloak.GetOIDCTokenRequest)) *KeycloakClient_GetOIDCToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(keycloak.GetOIDCTokenRequest))
	})
	return _c
}

func (_c *KeycloakClient_GetOIDCToken_Call) Return(_a0 *keycloak.GetOIDCTokenResponse, _a1 error) *KeycloakClient_GetOIDCToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KeycloakClient_GetOIDCToken_Call) RunAndReturn(run func(context.Context, keycloak.GetOIDCTokenRequest) (*keycloak.GetOIDCTokenResponse, error)) *KeycloakClient_GetOIDCToken_Call {
	_c.Call.Return(run)
	return _c
}

// IntrospectOIDCToken provides a mock function with given fields: ctx, request
func (_m *KeycloakClient) IntrospectOIDCToken(ctx context.Context, request keycloak.IntrospectOIDCTokenRequest) (*keycloak.IntrospectOIDCTokenResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for IntrospectOIDCToken")
	}

	var r0 *keycloak.IntrospectOIDCTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, keycloak.IntrospectOIDCTokenRequest) (*keycloak.IntrospectOIDCTokenResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, keycloak.IntrospectOIDCTokenRequest) *keycloak.IntrospectOIDCTokenResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keycloak.IntrospectOIDCTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, keycloak.IntrospectOIDCTokenRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeycloakClient_IntrospectOIDCToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IntrospectOIDCToken'
type KeycloakClient_IntrospectOIDCToken_Call struct {
	*mock.Call
}

// IntrospectOIDCToken is a helper method to define mock.On call
//   - ctx context.Context
//   - request keycloak.IntrospectOIDCTokenRequest
func (_e *KeycloakClient_Expecter) IntrospectOIDCToken(ctx interface{}, request interface{}) *KeycloakClient_IntrospectOIDCToken_Call {
	return &KeycloakClient_IntrospectOIDCToken_Call{Call: _e.mock.On("IntrospectOIDCToken", ctx, request)}
}

func (_c *KeycloakClient_IntrospectOIDCToken_Call) Run(run func(ctx context.Context, request keycloak.IntrospectOIDCTokenRequest)) *KeycloakClient_IntrospectOIDCToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(keycloak.IntrospectOIDCTokenRequest))
	})
	return _c
}

func (_c *KeycloakClient_IntrospectOIDCToken_Call) Return(_a0 *keycloak.IntrospectOIDCTokenResponse, _a1 error) *KeycloakClient_IntrospectOIDCToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KeycloakClient_IntrospectOIDCToken_Call) RunAndReturn(run func(context.Context, keycloak.IntrospectOIDCTokenRequest) (*keycloak.IntrospectOIDCTokenResponse, error)) *KeycloakClient_IntrospectOIDCToken_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeOIDCToken provides a mock function with given fields: ctx, request
func (_m *KeycloakClient) RevokeOIDCToken(ctx context.Context, request keycloak.RevokeOIDCTokenRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for RevokeOIDCToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, keycloak.RevokeOIDCTokenRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// KeycloakClient_RevokeOIDCToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeOIDCToken'
type KeycloakClient_RevokeOIDCToken_Call struct {
	*mock.Call
}

// RevokeOIDCToken is a helper method to define mock.On call
//   - ctx context.Context
//   - request keycloak.RevokeOIDCTokenRequest
func (_e *KeycloakClient_Expecter) RevokeOIDCToken(ctx interface{}, request interface{}) *KeycloakClient_RevokeOIDCToken_Call {
	return &KeycloakClient_RevokeOIDCToken_Call{Call: _e.mock.On("RevokeOIDCToken", ctx, request)}
}

func (_c *KeycloakClient_RevokeOIDCToken_Call) Run(run func(ctx context.Context, request keycloak.RevokeOIDCTokenRequest)) *KeycloakClient_RevokeOIDCToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(keycloak.RevokeOIDCTokenRequest))
	})
	return _c
}

func (_c *KeycloakClient_RevokeOIDCToken_Call) Return(_a0 error) *KeycloakClient_RevokeOIDCToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KeycloakClient_RevokeOIDCToken_Call) RunAndReturn(run func(context.Context, keycloak.RevokeOIDCTokenRequest) error) *KeycloakClient_RevokeOIDCToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewKeycloakClient creates a new instance of KeycloakClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKeycloakClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *KeycloakClient {
	mock := &KeycloakClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
