// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// PostgresClient is an autogenerated mock type for the PostgresClient type
type PostgresClient struct {
	mock.Mock
}

type PostgresClient_Expecter struct {
	mock *mock.Mock
}

func (_m *PostgresClient) EXPECT() *PostgresClient_Expecter {
	return &PostgresClient_Expecter{mock: &_m.Mock}
}

// QuerySelect provides a mock function with given fields: ctx, result, sqlQuery, args
func (_m *PostgresClient) QuerySelect(ctx context.Context, result interface{}, sqlQuery string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, result, sqlQuery)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for QuerySelect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string, ...interface{}) error); ok {
		r0 = rf(ctx, result, sqlQuery, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PostgresClient_QuerySelect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QuerySelect'
type PostgresClient_QuerySelect_Call struct {
	*mock.Call
}

// QuerySelect is a helper method to define mock.On call
//   - ctx context.Context
//   - result interface{}
//   - sqlQuery string
//   - args ...interface{}
func (_e *PostgresClient_Expecter) QuerySelect(ctx interface{}, result interface{}, sqlQuery interface{}, args ...interface{}) *PostgresClient_QuerySelect_Call {
	return &PostgresClient_QuerySelect_Call{Call: _e.mock.On("QuerySelect",
		append([]interface{}{ctx, result, sqlQuery}, args...)...)}
}

func (_c *PostgresClient_QuerySelect_Call) Run(run func(ctx context.Context, result interface{}, sqlQuery string, args ...interface{})) *PostgresClient_QuerySelect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *PostgresClient_QuerySelect_Call) Return(_a0 error) *PostgresClient_QuerySelect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PostgresClient_QuerySelect_Call) RunAndReturn(run func(context.Context, interface{}, string, ...interface{}) error) *PostgresClient_QuerySelect_Call {
	_c.Call.Return(run)
	return _c
}

// NewPostgresClient creates a new instance of PostgresClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPostgresClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *PostgresClient {
	mock := &PostgresClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
