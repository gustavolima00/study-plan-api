// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	studysession "go-api/src/models/studysession"

	uuid "github.com/google/uuid"
)

// StudySessionRepository is an autogenerated mock type for the StudySessionRepository type
type StudySessionRepository struct {
	mock.Mock
}

type StudySessionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *StudySessionRepository) EXPECT() *StudySessionRepository_Expecter {
	return &StudySessionRepository_Expecter{mock: &_m.Mock}
}

// GetUserStudySession provides a mock function with given fields: ctx, sessionID
func (_m *StudySessionRepository) GetUserStudySession(ctx context.Context, sessionID uuid.UUID) (*studysession.StudySession, error) {
	ret := _m.Called(ctx, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserStudySession")
	}

	var r0 *studysession.StudySession
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*studysession.StudySession, error)); ok {
		return rf(ctx, sessionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *studysession.StudySession); ok {
		r0 = rf(ctx, sessionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*studysession.StudySession)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, sessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StudySessionRepository_GetUserStudySession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserStudySession'
type StudySessionRepository_GetUserStudySession_Call struct {
	*mock.Call
}

// GetUserStudySession is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID uuid.UUID
func (_e *StudySessionRepository_Expecter) GetUserStudySession(ctx interface{}, sessionID interface{}) *StudySessionRepository_GetUserStudySession_Call {
	return &StudySessionRepository_GetUserStudySession_Call{Call: _e.mock.On("GetUserStudySession", ctx, sessionID)}
}

func (_c *StudySessionRepository_GetUserStudySession_Call) Run(run func(ctx context.Context, sessionID uuid.UUID)) *StudySessionRepository_GetUserStudySession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *StudySessionRepository_GetUserStudySession_Call) Return(_a0 *studysession.StudySession, _a1 error) *StudySessionRepository_GetUserStudySession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StudySessionRepository_GetUserStudySession_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*studysession.StudySession, error)) *StudySessionRepository_GetUserStudySession_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserStudySessions provides a mock function with given fields: ctx, userID
func (_m *StudySessionRepository) GetUserStudySessions(ctx context.Context, userID uuid.UUID) ([]studysession.StudySession, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserStudySessions")
	}

	var r0 []studysession.StudySession
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]studysession.StudySession, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []studysession.StudySession); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]studysession.StudySession)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StudySessionRepository_GetUserStudySessions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserStudySessions'
type StudySessionRepository_GetUserStudySessions_Call struct {
	*mock.Call
}

// GetUserStudySessions is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *StudySessionRepository_Expecter) GetUserStudySessions(ctx interface{}, userID interface{}) *StudySessionRepository_GetUserStudySessions_Call {
	return &StudySessionRepository_GetUserStudySessions_Call{Call: _e.mock.On("GetUserStudySessions", ctx, userID)}
}

func (_c *StudySessionRepository_GetUserStudySessions_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *StudySessionRepository_GetUserStudySessions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *StudySessionRepository_GetUserStudySessions_Call) Return(_a0 []studysession.StudySession, _a1 error) *StudySessionRepository_GetUserStudySessions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StudySessionRepository_GetUserStudySessions_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]studysession.StudySession, error)) *StudySessionRepository_GetUserStudySessions_Call {
	_c.Call.Return(run)
	return _c
}

// NewStudySessionRepository creates a new instance of StudySessionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStudySessionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *StudySessionRepository {
	mock := &StudySessionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
