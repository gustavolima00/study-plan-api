// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	sqlx "github.com/jmoiron/sqlx"
)

// PostgresClient is an autogenerated mock type for the PostgresClient type
type PostgresClient struct {
	mock.Mock
}

type PostgresClient_Expecter struct {
	mock *mock.Mock
}

func (_m *PostgresClient) EXPECT() *PostgresClient_Expecter {
	return &PostgresClient_Expecter{mock: &_m.Mock}
}

// NewConnection provides a mock function with no fields
func (_m *PostgresClient) NewConnection() (*sqlx.DB, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NewConnection")
	}

	var r0 *sqlx.DB
	var r1 error
	if rf, ok := ret.Get(0).(func() (*sqlx.DB, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *sqlx.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.DB)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostgresClient_NewConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewConnection'
type PostgresClient_NewConnection_Call struct {
	*mock.Call
}

// NewConnection is a helper method to define mock.On call
func (_e *PostgresClient_Expecter) NewConnection() *PostgresClient_NewConnection_Call {
	return &PostgresClient_NewConnection_Call{Call: _e.mock.On("NewConnection")}
}

func (_c *PostgresClient_NewConnection_Call) Run(run func()) *PostgresClient_NewConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PostgresClient_NewConnection_Call) Return(_a0 *sqlx.DB, _a1 error) *PostgresClient_NewConnection_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PostgresClient_NewConnection_Call) RunAndReturn(run func() (*sqlx.DB, error)) *PostgresClient_NewConnection_Call {
	_c.Call.Return(run)
	return _c
}

// NewPostgresClient creates a new instance of PostgresClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPostgresClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *PostgresClient {
	mock := &PostgresClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
